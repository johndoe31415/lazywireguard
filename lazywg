#!/usr/bin/python3
#	lazywireguard - Quick setup of Wireguard keys and routing table
#	Copyright (C) 2021-2022 Johannes Bauer
#
#	This file is part of lazywireguard.
#
#	lazywireguard is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	lazywireguard is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with lazywireguard; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import os
import json
import contextlib
import subprocess
import re
import collections
import itertools
from FriendlyArgumentParser import FriendlyArgumentParser
from CIDR import CIDR
from CmdlineEscape import CmdlineEscape
from WireguardGenerator import WireguardGenerator

parser = FriendlyArgumentParser(description = "Simple example application.")
parser.add_argument("-o", "--output-dir", metavar = "path", help = "Specifies output directory to use. Defaults to the network domainname.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("config_file", help = "JSON configuration file for VPN setup")
args = parser.parse_args(sys.argv[1:])


wggen = WireguardGenerator(args)
sys.exit(0)


class xxxWGGenerator():
	_RULE_SYNTAX = re.compile(r"(?P<lhs>[^\s]+)\s+(?P<arrow>(<-|->|<->))\s+(?P<rhs>[^\s]+)")

	def __init__(self, args):
		self._args = args
		with open(self._args.config_file) as f:
			self._config = json.load(f)
		self._cidr = CIDR(self._config["network"]["address"])
		if "name" not in self._config["concentrator"]:
			self._config["concentrator"]["name"] = "concentrator"
		self._plausibilize()
		self._meta = { }
		self._group_members = collections.defaultdict(list)
		self._assign_ip_addresses()

	def _assign_ip_addresses(self):
		if "start" in self._config["network"]:
			self._cidr.set_start(self._config["network"]["start"])

		for host in self._config["clients"]:
			if "group" in host:
				self._group_members[host["group"]].append(host["name"])

		for host in self.all_hosts:
			if "fixed_ip" in host:
				self._cidr.claim(host["fixed_ip"])

		for host in self.all_hosts:
			name = host["name"]
			if "fixed_ip" in host:
				ip = host["fixed_ip"]
			else:
				ip = self._cidr.next_addr()
			self._meta[name] = {
				"address":	ip,
			}
			if self._args.verbose >= 2:
				print("%s: %s" % (name, ip))

	def _plausibilize(self):
		names = list(self.all_names)
		name_set = set(names)
		if len(names) != len(name_set):
			raise Exception("Duplicate hostnames.")

	@property
	def output_dir(self):
		if self._args.output_dir is not None:
			return self._args.output_dir
		else:
			return self._config["network"]["domainname"]

	@property
	def all_hosts(self):
		yield self._config["concentrator"]
		yield from self._config["clients"]

	@property
	def all_names(self):
		for host in self.all_hosts:
			yield host["name"]

	def _to_host_ip(self, net):
		is_ipv4 = "." in net
		if is_ipv4:
			return net.split("/", maxsplit = 1)[0] + "/32"
		else:
			return net.split("/", maxsplit = 1)[0] + "/128"

	def _generate_server(self, definition):
		filename = self._meta[definition["name"]]["config_filename"]
		with open(filename, "w") as f:
			addresses = [ "%s/%d" % (self._meta[definition["name"]]["address"], self._cidr.subnet) ]
			if "additional_addrs" in self._config["network"]:
				addresses += self._config["network"]["additional_addrs"]

			print("[Interface]", file = f)
			print("Address = %s" % (", ".join(addresses)), file = f)
			print("ListenPort = %d" % (self._config["concentrator"].get("port", 51820)), file = f)
			print("PrivateKey = %s" % (self._meta[definition["name"]]["privkey"]), file = f)

			for client in self._config["clients"]:
				allowed_ips = [ "%s/32" % (self._meta[client["name"]]["address"]) ]
				if "additional_addrs" in client:
					allowed_ips += [ self._to_host_ip(ip) for ip in client["additional_addrs"] ]
				print(file = f)
				print("# %s" % (client["name"]), file = f)
				print("[Peer]", file = f)
				print("PublicKey = %s" % (self._meta[client["name"]]["pubkey"]), file = f)
				print("AllowedIPs = %s" % (", ".join(allowed_ips)), file = f)

	def _generate_client(self, definition):
		filename = self._meta[definition["name"]]["config_filename"]
		with open(filename, "w") as f:
			addresses = [ "%s/%d" % (self._meta[definition["name"]]["address"], self._cidr.subnet) ]
			if "additional_addrs" in definition:
				addresses += definition["additional_addrs"]
			print("[Interface]", file = f)
			print("PrivateKey = %s" % (self._meta[definition["name"]]["privkey"]), file = f)
			print("Address = %s" % (", ".join(addresses)), file = f)
			print(file = f)

#			allowed_ips = [ "%s/%d" % (self._cidr.net, self._cidr.subnet) ]
			allowed_ips = [ ]
			if "additional_nets" in self._config["network"]:
				allowed_ips += self._config["network"]["additional_nets"]
			print("[Peer]", file = f)
			print("PublicKey = %s" % (self._meta[self._config["concentrator"]["name"]]["pubkey"]), file = f)
			if len(allowed_ips) > 0:
				print("AllowedIPs = %s" % (", ".join(allowed_ips)), file = f)
			print("Endpoint = %s:%d" % (self._config["concentrator"]["hostname"], self._config["concentrator"].get("port", 51820)), file = f)
			print("PersistentKeepalive = 60", file = f)

	def _iptables_rule(self, ifname, src, dst, only_established = False):
		cmd = [ "iptables", "-A", "FORWARD", "-i", ifname, "-o", ifname ]
		if only_established:
			cmd += [ "-m", "state", "--state", "ESTABLISHED,RELATED" ]
		if src != "*":
			cmd += [ "-s", src ]
		if dst != "*":
			cmd += [ "-d", dst ]
		cmd += [ "-j", "ACCEPT" ]
		rule_text = "%s -> %s" % (src, dst) if (not only_established) else "only established: %s -> %s" % (src, dst)
		cmd += [ "-m", "comment", "--comment", rule_text ]
		return cmd

	def _resolve_routing_target(self, host):
		if host == "*":
			yield host
		elif host.startswith("!"):
			# Explicit address, take as-is
			yield host[1:]
		elif host.startswith("@"):
			# Whole group
			group_name = host[1:]
			for member in self._group_members[group_name]:
				yield from self._resolve_routing_target(member)
		else:
			# Group member
			yield self._meta[host]["address"]

	def _iptables_rules(self, ifname, src, dst, only_established = False):
		srcs = self._resolve_routing_target(src)
		dsts = self._resolve_routing_target(dst)
		for (ipsrc, ipdst) in itertools.product(srcs, dsts):
			yield self._iptables_rule(ifname, ipsrc, ipdst, only_established)

	def _generate_routing_table(self):
		host = self._config["concentrator"]
		ifname = host.get("ifname", "wg0")
		dirname = self.output_dir + "/" + host["name"]
		filename = "%s/iptables.sh" % (dirname)
		with open(filename, "w") as f:
			cle = CmdlineEscape()
			print("#!/bin/bash", file = f)
			for rule in self._config.get("route", [ ]):
				match = self._RULE_SYNTAX.fullmatch(rule)
				if match is None:
					raise Exception("Unable to parse routing rule: %s" % (rule))
				match = match.groupdict()

				if match["arrow"] == "<-":
					(match["lhs"], match["arrow"], match["rhs"]) = (match["rhs"], "->", match["lhs"])

				uni_directional = (match["arrow"] == "->")
				if uni_directional:
					# Initial packets are okay, but we only route back estalibshed/related connections
					for rule in self._iptables_rules(ifname, match["lhs"], match["rhs"]):
						print(cle.cmdline(rule), file = f)
					for rule in self._iptables_rules(ifname, match["rhs"], match["lhs"], only_established = True):
						print(cle.cmdline(rule), file = f)
				else:
					print(cle.cmdline(self._iptables_rule(ifname, match["lhs"], match["rhs"])), file = f)
					print(cle.cmdline(self._iptables_rule(ifname, match["rhs"], match["lhs"])), file = f)

	def run(self):
		for host in self.all_hosts:
			dirname = self.output_dir + "/" + host["name"]
			with contextlib.suppress(FileExistsError):
				os.makedirs(dirname)
			os.chmod(dirname, 0o700)
			name = host["name"]
			ifname = host.get("ifname", "wg0")
			config_filename = "%s/%s.conf" % (dirname, ifname)
			privkey_filename = "%s/%s-private.key" % (dirname, ifname)
			pubkey_filename = "%s/%s-public.key" % (dirname, ifname)

			if not os.path.exists(privkey_filename):
				privkey = subprocess.check_output([ "wg", "genkey" ])
				with open(privkey_filename, "wb") as f:
					f.write(privkey)
			with open(privkey_filename) as f:
				privkey = f.read().rstrip("\r\n")
			self._meta[name]["privkey"] = privkey

			if not os.path.exists(pubkey_filename):
				pubkey = subprocess.check_output([ "wg", "pubkey" ], input = privkey.encode("ascii"))
				with open(pubkey_filename, "wb") as f:
					f.write(pubkey)
			with open(pubkey_filename) as f:
				pubkey = f.read().rstrip("\r\n")
			self._meta[name]["pubkey"] = pubkey
			self._meta[name]["config_filename"] = config_filename

		self._generate_server(self._config["concentrator"])
		for client in self._config["clients"]:
			self._generate_client(client)
		self._generate_routing_table()

wgg = WGGenerator(args)
wgg.run()
